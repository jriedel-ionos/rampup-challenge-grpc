// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: server.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EnvVariable_GetEnvironmentVariable_FullMethodName = "/EnvVariable/GetEnvironmentVariable"
)

// EnvVariableClient is the client API for EnvVariable service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvVariableClient interface {
	GetEnvironmentVariable(ctx context.Context, in *GetEnvironmentVariableRequest, opts ...grpc.CallOption) (*GetEnvironmentVariableResponse, error)
}

type envVariableClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvVariableClient(cc grpc.ClientConnInterface) EnvVariableClient {
	return &envVariableClient{cc}
}

func (c *envVariableClient) GetEnvironmentVariable(ctx context.Context, in *GetEnvironmentVariableRequest, opts ...grpc.CallOption) (*GetEnvironmentVariableResponse, error) {
	out := new(GetEnvironmentVariableResponse)
	err := c.cc.Invoke(ctx, EnvVariable_GetEnvironmentVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvVariableServer is the server API for EnvVariable service.
// All implementations must embed UnimplementedEnvVariableServer
// for forward compatibility
type EnvVariableServer interface {
	GetEnvironmentVariable(context.Context, *GetEnvironmentVariableRequest) (*GetEnvironmentVariableResponse, error)
	mustEmbedUnimplementedEnvVariableServer()
}

// UnimplementedEnvVariableServer must be embedded to have forward compatible implementations.
type UnimplementedEnvVariableServer struct {
}

func (UnimplementedEnvVariableServer) GetEnvironmentVariable(context.Context, *GetEnvironmentVariableRequest) (*GetEnvironmentVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironmentVariable not implemented")
}
func (UnimplementedEnvVariableServer) mustEmbedUnimplementedEnvVariableServer() {}

// UnsafeEnvVariableServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvVariableServer will
// result in compilation errors.
type UnsafeEnvVariableServer interface {
	mustEmbedUnimplementedEnvVariableServer()
}

func RegisterEnvVariableServer(s grpc.ServiceRegistrar, srv EnvVariableServer) {
	s.RegisterService(&EnvVariable_ServiceDesc, srv)
}

func _EnvVariable_GetEnvironmentVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvironmentVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvVariableServer).GetEnvironmentVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvVariable_GetEnvironmentVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvVariableServer).GetEnvironmentVariable(ctx, req.(*GetEnvironmentVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvVariable_ServiceDesc is the grpc.ServiceDesc for EnvVariable service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvVariable_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EnvVariable",
	HandlerType: (*EnvVariableServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnvironmentVariable",
			Handler:    _EnvVariable_GetEnvironmentVariable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
